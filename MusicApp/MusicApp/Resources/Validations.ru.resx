<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlbumGenresCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели по крайней мере 1 {PropertyName}</value>
  </data>
  <data name="AlbumGenresCheckValidGenre" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели правильный {PropertyName}</value>
  </data>
  <data name="AlbumNameCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName}</value>
  </data>
  <data name="AlbumNameCheckLength" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName} длиной от 4 до 30 символов</value>
  </data>
  <data name="AlbumReleaseCheckIsNotEmpty" xml:space="preserve">
    <value>Поле {PropertyName} не должно быть пустым, пожалуйста, заполните это поле</value>
  </data>
  <data name="AlbumReleaseCheckItIsADate" xml:space="preserve">
    <value>Пожалуйста, укажите правильное {PropertyName}</value>
  </data>
  <data name="AlbumReleaseShouldNotBeFuture" xml:space="preserve">
    <value>Вам нужно ввести правильное {PropertyName}</value>
  </data>
  <data name="AlbumSortByCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свой {propertyName}</value>
  </data>
  <data name="AlbumTypeCheckCorrectValue" xml:space="preserve">
    <value>Пожалуйста введите корректное значение:  EP or LP</value>
  </data>
  <data name="AlbumTypeCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName}</value>
  </data>
  <data name="ArtistDescriptionCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свой {PropertyName}</value>
  </data>
  <data name="ArtistDescriptionCheckLength" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName} длиной от 30 до 1500 символов</value>
  </data>
  <data name="ArtistGenresCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели по крайней мере 1 {PropertyName}</value>
  </data>
  <data name="ArtistGenresCheckValidGenre" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели правильное {PropertyName}</value>
  </data>
  <data name="ArtistNameCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName}</value>
  </data>
  <data name="ArtistNameCheckLength" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свой {PropertyName} длиной от 4 до 30 символов</value>
  </data>
  <data name="ArtistNotFoundByThisId" xml:space="preserve">
    <value>Исполнитель по этому идентификатору не найден</value>
  </data>
  <data name="ArtistOrAlbumIsNotFound" xml:space="preserve">
    <value>Артист или Альбом не был найден.</value>
  </data>
  <data name="NotPossibleToCreateAlbum" xml:space="preserve">
    <value>Создать альбом этого исполнителя не удалось, потому что артист по этому  идентификатору не был найден.</value>
  </data>
  <data name="OrderByCheckCorrectValues" xml:space="preserve">
    <value>Пожалуйста введите desc или asc</value>
  </data>
  <data name="PageNumberCheckValidInput" xml:space="preserve">
    <value>Пожалуйста введите не отрицательный {PropertyName}</value>
  </data>
  <data name="PageSizeCheckValidInput" xml:space="preserve">
    <value>Пожалуйста введите не отрицательный {PropertyName}</value>
  </data>
  <data name="SongDurationInSecondsPositiveCheck" xml:space="preserve">
    <value>{PropertyName} должен быть больше 0</value>
  </data>
  <data name="SongNameCheckCorrectLength" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName} длиной от 4 до 30 символов</value>
  </data>
  <data name="SongNameCheckIsNotEmpty" xml:space="preserve">
    <value>Пожалуйста, убедитесь, что вы ввели свое {PropertyName}</value>
  </data>
  <data name="SongNumberPositiveCheck" xml:space="preserve">
    <value>{PropertyName} должен быть больше 0</value>
  </data>
  <data name="SortByCheckCorrectValues" xml:space="preserve">
    <value>Пожалуйста введите корректные значения для сортировки</value>
  </data>
  <data name="UserDateOfBirthCannotBeInTheFuture" xml:space="preserve">
    <value>{PropertyName} не может быть в будущем</value>
  </data>
  <data name="UserDateOfBirthIsTooOld" xml:space="preserve">
    <value>Слишком старая {PropertyName}</value>
  </data>
  <data name="UserEmailCannotBeEmpty" xml:space="preserve">
    <value>{PropertyName} не может быть пустым</value>
  </data>
  <data name="UserEmailCannotExceed320Characters" xml:space="preserve">
    <value>{PropertyName} не может превышать 320 символов</value>
  </data>
  <data name="UserEmailInvalidFormat" xml:space="preserve">
    <value>Некорректный формат {PropertyName} адреса</value>
  </data>
  <data name="UserEmailShouldBeUnique" xml:space="preserve">
    <value>This {PropertyName} is already in use.</value>
  </data>
  <data name="UserFirstNameCannotBeEmpty" xml:space="preserve">
    <value>{PropertyName} не может быть пустым</value>
  </data>
  <data name="UserFirstNameCannotExceed50Characters" xml:space="preserve">
    <value>{PropertyName} не может превышать 50 символов</value>
  </data>
  <data name="UserLastNameCannotBeEmpty" xml:space="preserve">
    <value>{PropertyName} не может быть пустым</value>
  </data>
  <data name="UserLastNameCannotExceed50Characters" xml:space="preserve">
    <value>{PropertyName} не может превышать 50 символов</value>
  </data>
  <data name="UserLoginCanContainOnlyLettersNumberAndUnderscore" xml:space="preserve">
    <value>{PropertyName} может содержать только буквы, цифры и символ подчеркивания</value>
  </data>
  <data name="UserLoginCannotExceed50Characters" xml:space="preserve">
    <value>{PropertyName} не может превышать 50 символов</value>
  </data>
  <data name="UserLoginCheckIsNotEmpty" xml:space="preserve">
    <value>{PropertyName} не может быть пустым</value>
  </data>
  <data name="UserLoginMustContainAtLeast4Characters" xml:space="preserve">
    <value>{PropertyName} должен содержать как минимум 4 символа</value>
  </data>
  <data name="UserLoginShouldBeUnique" xml:space="preserve">
    <value>Этот {PropertyName} уже используется.</value>
  </data>
  <data name="UserPasswordCannotBeEmpty" xml:space="preserve">
    <value>{PropertyName} не может быть пустым</value>
  </data>
  <data name="UserPasswordCannotExceed50Characters" xml:space="preserve">
    <value>{PropertyName} не может превышать 50 символов</value>
  </data>
  <data name="UserPasswordMustContainAtLeast8Characters" xml:space="preserve">
    <value>{PropertyName} должен содержать как минимум 8 символов</value>
  </data>
  <data name="UserPasswordMustContainAtLeastOneDigit" xml:space="preserve">
    <value>{PropertyName} должен содержать как минимум одну цифру</value>
  </data>
  <data name="UserPasswordMustContainAtLeastOneLowercaseLetter" xml:space="preserve">
    <value>{PropertyName} должен содержать как минимум одну строчную букву</value>
  </data>
  <data name="UserPasswordMustContainAtLeastOneSpecialCharacter" xml:space="preserve">
    <value>{PropertyName} должен содержать как минимум один специальный символ</value>
  </data>
  <data name="UserPasswordMustContainAtLeastOneUppercaseLetter" xml:space="preserve">
    <value>{PropertyName} должен содержать как минимум одну заглавную букву</value>
  </data>
</root>